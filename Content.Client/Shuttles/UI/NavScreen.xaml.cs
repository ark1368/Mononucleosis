using System.Numerics;
using Content.Shared.Shuttles.BUIStates;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Physics.Components;
using Content.Shared.Shuttles.Components;

namespace Content.Client.Shuttles.UI;

[GenerateTypedNameReferences]
public sealed partial class NavScreen : BoxContainer
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    private SharedTransformSystem _xformSystem;

    private EntityUid? _consoleEntity; // Entity of controlling console
    private EntityUid? _shuttleEntity;

    public NavScreen()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _xformSystem = _entManager.System<SharedTransformSystem>();

        IFFToggle.OnToggled += OnIFFTogglePressed;
        IFFToggle.Pressed = NavRadar.ShowIFF;

        DockToggle.OnToggled += OnDockTogglePressed;
        DockToggle.Pressed = NavRadar.ShowDocks;
    }

    public void SetShuttle(EntityUid? shuttle)
    {
        _shuttleEntity = shuttle;
        UpdateShipDesignation();
    }

    public void SetConsole(EntityUid? console)
    {
        _consoleEntity = console;
        NavRadar.SetConsole(console);
    }

    private void OnIFFTogglePressed(BaseButton.ButtonEventArgs args)
    {
        NavRadar.ShowIFF ^= true;
        args.Button.Pressed = NavRadar.ShowIFF;
    }

    private void OnDockTogglePressed(BaseButton.ButtonEventArgs args)
    {
        NavRadar.ShowDocks ^= true;
        args.Button.Pressed = NavRadar.ShowDocks;
    }

    public void UpdateState(NavInterfaceState scc)
    {
        NavRadar.UpdateState(scc);
        
        // Use the ship designation from the state if available
        if (!string.IsNullOrEmpty(scc.ShipDesignation))
        {
            ShipDesignation.Text = scc.ShipDesignation;
        }
        else
        {
            // Fallback to getting designation from the entity if it exists
            UpdateShipDesignation();
        }
    }

    public void SetMatrix(EntityCoordinates? coordinates, Angle? angle)
    {
        _shuttleEntity = coordinates?.EntityId;
        NavRadar.SetMatrix(coordinates, angle);
        UpdateShipDesignation();
    }
    
    /// <summary>
    /// Updates the ship designation display with data from the shuttle entity
    /// </summary>
    private void UpdateShipDesignation()
    {
        if (_shuttleEntity == null || !_entManager.EntityExists(_shuttleEntity.Value))
        {
            ShipDesignation.Text = Loc.GetString("shuttle-console-designation-unknown");
            return;
        }
        
        if (_entManager.TryGetComponent<ShipDesignationComponent>(_shuttleEntity.Value, out var designationComp) && 
            !string.IsNullOrEmpty(designationComp.Designation))
        {
            ShipDesignation.Text = designationComp.Designation;
        }
        else
        {
            ShipDesignation.Text = Loc.GetString("shuttle-console-designation-none");
        }
    }

    protected override void Draw(DrawingHandleScreen handle)
    {
        base.Draw(handle);

        if (!_entManager.TryGetComponent(_shuttleEntity, out TransformComponent? gridXform) ||
            !_entManager.TryGetComponent(_shuttleEntity, out PhysicsComponent? gridBody))
        {
            return;
        }

        var (_, worldRot, worldMatrix) = _xformSystem.GetWorldPositionRotationMatrix(gridXform);
        var worldPos = Vector2.Transform(gridBody.LocalCenter, worldMatrix);

        // Get the positive reduced angle.
        var displayRot = -worldRot.Reduced();

        GridPosition.Text = $"{worldPos.X:0.0}, {worldPos.Y:0.0}";
        GridOrientation.Text = $"{displayRot.Degrees:0.0}";

        var gridVelocity = gridBody.LinearVelocity;
        gridVelocity = displayRot.RotateVec(gridVelocity);
        // Get linear velocity relative to the console entity
        GridLinearVelocity.Text = $"{gridVelocity.X + 10f * float.Epsilon:0.0}, {gridVelocity.Y + 10f * float.Epsilon:0.0}";
        GridAngularVelocity.Text = $"{-gridBody.AngularVelocity + 10f * float.Epsilon:0.0}";
    }
}
